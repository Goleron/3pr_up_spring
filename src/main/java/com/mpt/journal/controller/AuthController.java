package com.mpt.journal.controller;

import com.mpt.journal.dto.RegistrationDto;
import com.mpt.journal.entity.Role;
import com.mpt.journal.entity.User;
import com.mpt.journal.service.RoleService;
import com.mpt.journal.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.HashSet;
import java.util.Set;

@Controller
@RequiredArgsConstructor
public class AuthController {

    private final UserService userService;
    private final RoleService roleService;
    private final PasswordEncoder passwordEncoder;

    @GetMapping("/login")
    public String loginPage(@RequestParam(required = false) String error,
                            @RequestParam(required = false) String logout,
                            @RequestParam(required = false) String expired,
                            @RequestParam(required = false) String reason,
                            Model model) {
        if (error != null) {
            model.addAttribute("error", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
        if (logout != null) {
            model.addAttribute("message", "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        }
        if (expired != null) {
            if ("lifetime".equals(reason)) {
                model.addAttribute("error", "‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞");
            } else if ("inactive".equals(reason)) {
                model.addAttribute("error", "üí§ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: –≤—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç");
            } else {
                model.addAttribute("error", "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞");
            }
        }
        return "auth/login";
    }

    @GetMapping("/register")
    public String registerPage(Model model) {
        model.addAttribute("user", new RegistrationDto());
        return "auth/register";
    }

    @PostMapping("/register")
    public String register(@Valid @ModelAttribute("user") RegistrationDto registrationDto,
                           BindingResult result,
                           Model model) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
        if (!registrationDto.getPassword().equals(registrationDto.getConfirmPassword())) {
            result.rejectValue("confirmPassword", "error.user", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        }

        if (result.hasErrors()) {
            return "auth/register";
        }

        try {
            // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = User.builder()
                    .username(registrationDto.getUsername())
                    .email(registrationDto.getEmail())
                    .password(passwordEncoder.encode(registrationDto.getPassword()))
                    .isDeleted(false)
                    .build();

            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å USER
            Role userRole = roleService.getRoleByName("USER");
            Set<Role> roles = new HashSet<>();
            roles.add(userRole);
            user.setRoles(roles);

            userService.createUser(user);

            model.addAttribute("success", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏");
            return "auth/login";
        } catch (Exception e) {
            model.addAttribute("error", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return "auth/register";
        }
    }
}